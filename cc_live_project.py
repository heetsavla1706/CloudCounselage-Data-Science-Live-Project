# -*- coding: utf-8 -*-
"""CC_live_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AHJAeRthwLsU5H-KanGKmiOdcc-hZsrv
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.backends.backend_pdf import PdfPages

with PdfPages('Visualizations.pdf') as pdf:


  data = pd.read_csv('DS_DATESET.csv')

  data.head()

  data.shape

  data.columns

  drop_cols = ['First Name', 'Last Name','State', 'Zip Code',
         'DOB [DD/MM/YYYY]', 'Age', 'Gender', 'Email Address', 'Contact Number',
         'Emergency Contact Number','University Name', 'Degree', 'Course Type', 'Expected Graduation-year', 'Current Employment Status', 'Have you worked core Java','Current Employment Status', 'Have you worked core Java','Have you worked on MySQL or Oracle database',
         'Have you studied OOP Concepts']

  data.drop(['First Name', 'Last Name','State', 'Zip Code',
         'DOB [DD/MM/YYYY]', 'Age', 'Gender', 'Email Address', 'Contact Number',
         'Emergency Contact Number','University Name', 'Degree', 'Course Type', 'Expected Graduation-year', 'Current Employment Status', 'Have you worked core Java','Current Employment Status', 'Have you worked core Java'],axis = 1, inplace = True)

  data.drop(['Have you worked on MySQL or Oracle database',
         'Have you studied OOP Concepts'], axis=1, inplace=True)

  data.columns

  data.isnull().sum()

  data.drop(['Certifications/Achievement/ Research papers', 'Link to updated Resume (Google/ One Drive link preferred)',
         'link to Linkedin profile'], axis = 1, inplace = True)

  data.isnull().sum()

  data['Areas of interest'].value_counts()

  plt.figure(figsize=(20,15))
  ax=sns.countplot(y = data['Areas of interest'], order = data['Areas of interest'].value_counts().index, palette='colorblind')
  ax.set_title("Number of Students as per Areas of interest")
  pdf.savefig()
  #plt.show()

  data.rename(columns = {'Areas of interest':'Areas_of_interest', 'Programming Language Known other than Java (one major)':'python_or_any_other'
                                }, inplace = True)

  data.columns

  total_data_science_students = np.count_nonzero(np.where(data['Areas_of_interest'] == 'Data Science '))
  total_data_science_students

  data_science_with_python = np.count_nonzero(np.where((data['Areas_of_interest'] == 'Data Science ') & (data['python_or_any_other'] == 'Python')))

  data_science_without_python = total_data_science_students - data_science_with_python
  data_science_without_python

  labels=['DS with python','DS without python']
  explode=[0,0.1]
  data_of_ds_students= [data_science_with_python,data_science_without_python]
  def absolute_value(val):
      a  = np.round(val/100.*sum(data_of_ds_students), 0)
      return a

  plt.figure(figsize=(15,10))
  plt.pie(data_of_ds_students,labels=labels,autopct=absolute_value,colors=['blue','green'],explode=explode)
  pdf.savefig()
  #plt.show()

  data['How Did You Hear About This Internship?'].value_counts()

  plt.figure(figsize=(15,8))
  ax=sns.countplot(data['How Did You Hear About This Internship?'], order = data['How Did You Hear About This Internship?'].value_counts().index, palette='Blues_d')
  ax.set_title("Number of Students Per Area Of Technology")
  pdf.savefig()
  #plt.show()

  data['Which-year are you studying in?'].value_counts()

  total_fourth_year_students = np.count_nonzero(np.where(data['Which-year are you studying in?'] == 'Fourth-year'))
  total_fourth_year_students

  FY_greater_than_8_CGPA = np.count_nonzero(np.where((data['Which-year are you studying in?'] == 'Fourth-year') & (data['CGPA/ percentage'] > 8.0)))
  FY_greater_than_8_CGPA

  FY_equal_or_less_than_8_CGPA = total_fourth_year_students - FY_greater_than_8_CGPA
  FY_equal_or_less_than_8_CGPA

  x=['FY_greater_than_8_CGPA','FY_equal_or_less_than_8_CGPA']
  y=[FY_greater_than_8_CGPA,FY_equal_or_less_than_8_CGPA]

  plt.figure(figsize=(10,8))
  ax=sns.barplot(x=x,y=y,hue=y)
  ax.set_xlabel('Fourth Year Students')
  ax.set_ylabel('Number of students')
  ax.legend(loc='centre left', bbox_to_anchor=(1, 1.05))
  pdf.savefig()

  total_digital_marketing_students = np.count_nonzero(np.where(data['Areas_of_interest'] == 'Digital Marketing '))
  total_digital_marketing_students

  DM_greater_than_8 = np.count_nonzero(np.where((data['Which-year are you studying in?'] == 'Fourth-year') & (data['Rate your written communication skills [1-10]'] > 8.0) & (data['Rate your verbal communication skills [1-10]'] > 8.0)))
  DM_greater_than_8

  DM_equal_or_less_than_8 = total_digital_marketing_students - DM_greater_than_8
  DM_equal_or_less_than_8

  x=['DM_greater_than_8','DM_equal_or_less_than_8']
  y=[DM_greater_than_8,DM_equal_or_less_than_8]

  plt.figure(figsize=(10,8))
  ax = sns.barplot(x=x,y=y,hue=y)
  ax.set_xlabel('Digital Marketing Students')
  ax.set_ylabel('Number of students')
  ax.legend(loc='centre left', bbox_to_anchor=(1, 1.05))
  pdf.savefig()

  ya = data[["Which-year are you studying in?","Major/Area of Study","City"]].copy()
  ya = ya.groupby(["Which-year are you studying in?","Major/Area of Study"],as_index=False)['City'].count()
  print(ya)

  y1 = ya[ya["Major/Area of Study"] == "Computer Engineering" ]["City"]
  y2 = ya[ya["Major/Area of Study"] == "Electrical Engineering" ]["City"]
  y3 = ya[ya["Major/Area of Study"] == "Electronics and Telecommunication" ]["City"]
  labels = ya["Which-year are you studying in?"].unique()
  x = np.arange(len(labels))
  width = 0.25 
  plt.rcParams["figure.figsize"]= 10,8

  fig, ax = plt.subplots()
  rects1 = ax.bar(x + 0.0 , y1, width, label='Computer Engineering',color='darkred')
  rects2 = ax.bar(x + 0.25 , y2, width, label='Electrical Engineering',color='red')
  rects3 = ax.bar(x + 0.5 , y3, width, label='Electronics and Telecommunication',color='salmon')
  ax.set_ylabel('No Of Students')
  ax.set_title('Year wise area of study')
  ax.set_xticks(x)
  ax.set_xticklabels(labels)
  ax.legend(loc='upper right')
  pdf.savefig()

  cllgplot=data['College name'].value_counts().to_frame()
  cllgplot.plot(kind='barh', figsize=(28, 8),color="orange")
  plt.ylabel("College Name")
  plt.xlabel('Number of Applicants')
  plt.title('College Wise')
  plt.grid(True)
  pdf.savefig()
  #plt.show()

  data["Label"] = data["Label"].replace({'eligible':1,'ineligible':0})
  data.head()

  eligible = data[data['Label']==1]
  ineligible = data[data['Label']==0]
  fig,ax = plt.subplots()
  ax.scatter(eligible['CGPA/ percentage'], eligible['Label'], color='blue', label='Eligible/1')
  ax.scatter(ineligible['CGPA/ percentage'], ineligible['Label'], color='green', label='Ineligible/1')
  ax.set_xlabel('CGPA')
  ax.set_ylabel('Target Variable')
  ax.set_title('Relationship between CGPA and Target variable')
  ax.legend(loc='centre left', bbox_to_anchor=(1, 1.05))
  plt.gcf().set_size_inches(15, 8)
  plt.grid(True)
  pdf.savefig()
  #plt.show()

  eligible = data[data['Label']==1]
  ineligible = data[data['Label']==0]
  plt.figure(figsize=(8,5))
  fig,ax = plt.subplots()
  ax.scatter(eligible['Areas_of_interest'], eligible['Label'], color='purple', s=400, label='Eligible/1')
  ax.scatter(ineligible['Areas_of_interest'], ineligible['Label'], color='pink', s=400, label='Ineligible/1')
  ax.set_xlabel('Area of interest')
  ax.set_ylabel('Target Variable')
  ax.set_title('Relationship between Area of interest and Target variable')
  ax.legend(loc='right', bbox_to_anchor=(1.05, 1.05))
  plt.gcf().set_size_inches(15, 8)
  plt.xticks(rotation=90)
  plt.grid(True)
  pdf.savefig()
  #plt.show()

  df = data[['Which-year are you studying in?','Major/Area of Study','Label']].copy()
  df['Total_count'] = 1
  df = df.groupby(['Which-year are you studying in?','Major/Area of Study','Label'],as_index=False).count()
  df

  ym = data[["City","Major/Area of Study","Which-year are you studying in?","Label"]]
  ym = ym.groupby(["Which-year are you studying in?","Major/Area of Study","Label"],as_index=False).count()
  ym

  fig, ax = plt.subplots()
  Fourth = ym[ym["Which-year are you studying in?"] == 'Fourth-year']
  print(Fourth)

  total_comp = Fourth[Fourth["Major/Area of Study"]=="Computer Engineering"]["City"].sum()
  total_elec = Fourth[Fourth["Major/Area of Study"]=="Electrical Engineering"]["City"].sum()
  total_extc = Fourth[Fourth["Major/Area of Study"]=="Electronics and Telecommunication"]["City"].sum()

  y1 = Fourth[Fourth["Label"] == 0]["City"]
  y2 = Fourth[Fourth["Label"] == 1]["City"]
  y3 = [total_comp,total_elec,total_extc]
  labels=Fourth["Major/Area of Study"].unique()
  x = np.arange(len(labels))
  width = 0.25

  s3 = ax.bar(x , y3, width, label='Total',align='center',color='darkgreen')
  s1 = ax.bar(x + 0.25 , y1, width, label='Ineligible',align='center',color='chartreuse')
  s2 = ax.bar(x + 0.5, y2, width, label='Eligible',align='center',color='palegreen')

  ax.set_ylabel('Number Of Students')
  ax.set_title('Area of Study and Fourth Year')
  ax.set_xticks(x+0.25)
  ax.set_xticklabels(labels)
  ax.legend(loc='upper right')
  pdf.savefig()
  #plt.show()

  fig, ax = plt.subplots()
  Fourth = ym[ym["Which-year are you studying in?"] == 'Third-year']
  print(Fourth)

  total_comp = Fourth[Fourth["Major/Area of Study"]=="Computer Engineering"]["City"].sum()
  total_elec = Fourth[Fourth["Major/Area of Study"]=="Electrical Engineering"]["City"].sum()
  total_extc = Fourth[Fourth["Major/Area of Study"]=="Electronics and Telecommunication"]["City"].sum()

  y1 = Fourth[Fourth["Label"] == 0]["City"]
  y2 = Fourth[Fourth["Label"] == 1]["City"]
  y3 = [total_comp,total_elec,total_extc]
  labels=Fourth["Major/Area of Study"].unique()
  x = np.arange(len(labels))
  width = 0.25

  s3 = ax.bar(x , y3, width, label='Total',align='center',color='purple')
  s1 = ax.bar(x + 0.25 , y1, width, label='Ineligible',align='center',color='magenta')
  s2 = ax.bar(x + 0.5, y2, width, label='Eligible',align='center',color='pink')

  ax.set_ylabel('Number Of Students')
  ax.set_title('Area of Study and Third Year')
  ax.set_xticks(x+0.25)
  ax.set_xticklabels(labels)
  ax.legend(loc='upper right')
  pdf.savefig()
  #plt.show()

  fig, ax = plt.subplots()
  Fourth = ym[ym["Which-year are you studying in?"] == 'Second-year']
  print(Fourth)

  total_comp = Fourth[Fourth["Major/Area of Study"]=="Computer Engineering"]["City"].sum()
  total_elec = Fourth[Fourth["Major/Area of Study"]=="Electrical Engineering"]["City"].sum()
  total_extc = Fourth[Fourth["Major/Area of Study"]=="Electronics and Telecommunication"]["City"].sum()

  y1 = Fourth[Fourth["Label"] == 0]["City"]
  y2 = Fourth[Fourth["Label"] == 1]["City"]
  y3 = [total_comp,total_elec,total_extc]
  labels=Fourth["Major/Area of Study"].unique()
  x = np.arange(len(labels))
  width = 0.25

  s3 = ax.bar(x , y3, width, label='Total',align='center',color='k')
  s1 = ax.bar(x + 0.25 , y1, width, label='Ineligible',align='center',color='grey')
  s2 = ax.bar(x + 0.5, y2, width, label='Eligible',align='center',color='lightgray')

  ax.set_ylabel('Number Of Students')
  ax.set_title('Area of Study and Fourth Year')
  ax.set_xticks(x+0.25)
  ax.set_xticklabels(labels)
  ax.legend(loc='upper right')
  pdf.savefig()
  #plt.show()